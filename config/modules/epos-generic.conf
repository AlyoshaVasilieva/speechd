# Epos output module is based on the generic plugin for Speech
# Dispatcher. It means there is no C code written explicitly for
# this plugin, all the specifics are handled in this configuration
# and we call a simple command line client to perform the actual
# synthesis.
#
# WARNING: You will need to either rename the command epos-say in 
# GenericExecuteString to what's the name of this utility on your
# system (it might be "say"), or (better) create a link epos-say
# somewhere in your path to the epos's say client.


	# GenericExecuteSynth is the shell command that should be
	# executed in order to say some message. This command must
	# stop saying the message on SIGKILL, otherwise it's useless.
	# You can use the variables $LANG, $VOICE, $PITCH and $RATE
	# which will be substituted for the appropriate value (you
	# can modify this value, see other parameters).
	# The command can be split into more lines, if necessary, using '\'.
	GenericExecuteSynth \
"epos-say --language $LANG --voice $VOICE --init_f $PITCH --init_t $RATE \
\"$DATA\" >/dev/null"

	# AddVoice specifies which $VOICE string should be assigned to
	# each language and symbolic voice name. All the voices you want
	# to use must be specified here.
        AddVoice        "cs"	"male1"      "kadlec"
        AddVoice        "sk"	"male1"      "bob"

	# If the language you need to pass in $LANG is different
	# from the standard ISO language code, you can specify
	# which string to use instead. If you wish to use
	# other than ISO charset for the specified language,
	# you can add it's name (as accepted by iconv) as a
	# third parameter in doublequotes.
	GenericLanguage	"cs" "czech"
	GenericLanguage "sk" "slovak"


	# These parameters set _rate_ and _pitch_ conversion. This is
	# part of the core of the definition of this generic output
	# module for this concrete synthesizer, it's not intended to
	# be modified by common users.
	# The resulting rate (or pitch) has the form:
	# 	(speechd_rate * GenericRateMultiply) + GenericRateAdd
	# while speechd_rate is a value between -100 (lowest) and +100 (highest)
	# You have to define some meaningful conversion for each synthesizer
	GenericRateAdd 100
	GenericPitchAdd	100

	# (These values are multiplied by 100, because DotConf currently
	# doesn't support floats. So you can write 0.85 as 85 and so on.)
	GenericRateMultiply -85
	GenericPitchMultiply 100

