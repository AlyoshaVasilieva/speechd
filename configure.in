dnl Process this file with autoconf to produce a configure script.
AC_INIT(configure.in)

AC_LANG(C)

dnl progs
AC_PROG_CC

dnl info
AM_INIT_AUTOMAKE("speech-dispatcher", "`cat version.sh|grep '^VERSION'|awk -F= '{print $2}'`")

AM_CONFIG_HEADER(config.h)


dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(limits.h sys/ioctl.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_CHECK_FUNCS(select socket)

AC_PROG_INSTALL
AC_PROG_MAKE_SET

AC_PROG_LIBTOOL

# by Marcelo Magallon <mmagallo@efis.ucr.ac.cr>
# Turn around -rpath problem with libtool
# This define should be improbable enough to not conflict with anything
case ${host} in
  *-pc-linux-gnu)
    AC_MSG_RESULT([Fixing libtool for -rpath problems.])
    sed < libtool > libtool-2 \
    's/^hardcode_libdir_flag_spec.*$/hardcode_libdir_flag_spec=" -D__LIBTOOL_IS_A_FOOL__ "/'
    mv libtool-2 libtool
    chmod 755 libtool
  ;;
esac

dnl Checks for libraries.
AC_CHECK_LIB(m,
        sqrt, echo "",
        echo "*** Required math library missing! See INSTALL .";exit 1)
AC_CHECK_LIB(dl,
        main, echo "",
        echo "*** Required dl library missing! See INSTALL .";exit 1)
AC_CHECK_LIB(dotconf,
        main, echo "",
        echo "*** Required DotConf library missing! See INSTALL .";exit 1)
AC_CHECK_LIB(glib-2.0,
        g_list_append, echo "",
        echo "*** Required Glib-2.0 library missing! See INSTALL .";exit 1)
AC_CHECK_LIB(pthread,
        pthread_create, echo "",
        echo "*** Required pthread library missing! See INSTALL .";exit 1)

dnl Check for libsndfile.
PKG_CHECK_MODULES(SNDFILE, sndfile >= 1.0.2, ac_cv_sndfile=1, ac_cv_sndfile=0)

AC_DEFINE_UNQUOTED([HAVE_SNDFILE],${ac_cv_sndfile},
        [Set to 1 if you have libsndfile.])

AC_SUBST(SNDFILE_CFLAGS)
AC_SUBST(SNDFILE_LIBS)

dnl Check for Flite (currently required)
AC_CHECK_LIB(flite,
        flite_init, echo "",
        echo "",
	-lm)

AC_CHECK_LIB(flite_cmulex,
        cmu_lex_init, echo "",
        echo "",
	-lflite -lm)

AC_CHECK_LIB(flite_usenglish,
        usenglish_init, echo "",
        echo "",
	-lflite -lm)

flite_basic="-lm -lflite -lflite_cmulex -lflite_usenglish";

AC_CHECK_LIB(flite_cmu_us_kal16,
        register_cmu_us_kal, flite_ok="true";flite_kal="-lflite_cmu_us_kal16";echo "16-bit Kal Flite voice found. Flite support enabled.", 
        	AC_CHECK_LIB(flite_cmu_us_kal,	
        	register_cmu_us_kal, flite_ok="true";flite_libs="-lflite_cmu_us_kal";
		echo "8-bit Kal Flite voice found. Flite support enabled.", 
        	flite_ok="false"; echo "Flite libraries missing. Compiling without Flite support!",
		-lflite -lflite_usenglish -lflite_cmulex),
	-lm -lflite -lflite_usenglish -lflite_cmulex)

AC_SUBST(flite_basic)
AC_SUBST(flite_kal)

AC_ARG_WITH(flite, AS_HELP_STRING(--with-flite, Compile with Festival Lite (Flite) support),
		 if test $withval = "no"; then 
		    echo "Forced compilation without Flite support."; 
		    flite_ok="false";
		 else 
		    if test $flite_ok = "false"; then
		       echo "Flite support is not available. Sorry."; exit 1;
		    fi
                 fi
 		 echo "")

AM_CONDITIONAL(flite_support, test $flite_ok = "true")

dnl Check for IBM TTS
AC_CHECK_LIB(ibmeci,
        eciStop,
        ibmtts_ok="true";ibmtts_include="-I/opt/IBM/ibmtts/inc/"; echo "Compiling with IBM TTS support.",
        ibmtts_ok="false";ibmtts_include=""; echo "*** IBM TTS ECI library missing. Compiling without IBM TTS support! See INSTALL.";,
	-libmeci)

AC_ARG_WITH(ibmtts, AS_HELP_STRING(--with-ibmtts, Compile with IBM TTS support),
		 if test $withval = "no"; then 
		    echo "Forced compilation without IBMTTS support."; 
		    ibmtts_ok="false";
		 else 
		    if test $ibmtts_ok = "false"; then
		       echo "IBM TTS support is not available. Sorry."; exit 1;
		    fi
                 fi
 		 echo "")

AM_CONDITIONAL(ibmtts_support, test $ibmtts_ok = "true")

AC_SUBST(ibmtts_include)

dnl check for espeak support
AC_CHECK_LIB(espeak,
espeak_Initialize,
		espeak_ok="true"; echo "Compiling with espeak support.",
		espeak_ok="false"; echo "Espeak not found.",
         	-lpthread -lm)

AC_ARG_WITH(espeak, AS_HELP_STRING(--with-espeak, Compile with espeak support),
		 if test $withval = "no"; then 
		    echo "Forced compilation without espeak support."; 
		    espeak_ok="false";
		 else 
		    if test $espeak_ok = "false"; then
		       echo "Espeak support is not available. Sorry."; exit 1;
		    fi
                 fi
 		 echo "")

AM_CONDITIONAL(espeak_support, test $espeak_ok = "true")

AC_CHECK_LIB(audio,
        AuOpenServer,
	nas_aud="true";echo "Compiling with NAS support.";,
        nas_aud="false";echo "*** NAS Audio library missing. Compiling without NAS support! See INSTALL.";,
	-L/usr/X11R6/lib -lXau)

AC_ARG_WITH(nas, AS_HELP_STRING(--with-nas, Compile with Network Audio System (NAS) support),
		 if test $withval = "no"; then 
		    echo "Forced compilation without NAS support.";
		    nas_aud="false";
		 else 
		    if test $nas_aud = "false"; then
		       echo "NAS support is not available. Sorry."; exit 1;
		    fi
                 fi
 		 echo "")

AM_CONDITIONAL(nas_support, test $nas_aud = "true")

AC_CHECK_LIB(asound,
        snd_pcm_open,
	alsa_aud="true";echo "Compiling with ALSA support.";,
        alsa_aud="false";echo "*** ALSA C API library missing. Compiling without ALSA support! See INSTALL.";)

AC_ARG_WITH(alsa, AS_HELP_STRING(--with-alsa, Compile with ALSA support),
		 if test $withval = "no"; then 
		    echo "Forced compilation without ALSA support.";
		    alsa_aud="false";
		 else 
		    if test $alsa_aud = "false"; then
		       echo "ALSA support is not available. Sorry."; exit 1;
		    fi
                 fi
 		 echo "")

AM_CONDITIONAL(alsa_support, test $alsa_aud = "true")

AC_CHECK_LIB(pulse,
        pa_threaded_mainloop_new,
	pulse_aud="true";echo "Compiling with PulseAudio support.";,
        pulse_aud="false";echo "*** PulseAudio library missing. Compiling without PulseAudio support! See INSTALL.";,
	-lpulse)

AC_ARG_WITH(pulse, AS_HELP_STRING(--with-pulse, Compile with PulseAudio support),
		 if test $withval = "no"; then 
		    echo "Forced compilation without PulseAudio support.";
		    pulse_aud="false";
		 else 
		    if test $pulse_aud = "false"; then
		       echo "PulseAudio support is not available. Sorry."; exit 1;
		    fi
                 fi
 		 echo "")

AM_CONDITIONAL(pulse_support, test $pulse_aud = "true")

glib_include=`pkg-config --cflags glib-2.0`
AC_SUBST(glib_include)
glib_libs=`pkg-config --libs glib-2.0`
AC_SUBST(glib_libs)
gthread_libs=`pkg-config --libs gthread-2.0`
AC_SUBST(gthread_libs)

spdconfdir="$sysconfdir/speech-dispatcher/"
AC_SUBST(spdconfdir)
snddatadir="$datadir/sounds/speech-dispatcher/" 
AC_SUBST(snddatadir)
modulebindir="$libdir/speech-dispatcher-modules/"
AC_SUBST(modulebindir)
moduleconfdir="$sysconfdir/speech-dispatcher/modules/" 
AC_SUBST(moduleconfdir)
spdlibdir="$libdir/speech-dispatcher/" 
AC_SUBST(spdlibdir)
spdlib2dir="$libdir/speech-dispatcher/" 
AC_SUBST(spdlib2dir)


AC_ARG_VAR(pidpath, Absolute path to a pid file)

LIB_SDAUDIO_CURRENT=2
LIB_SDAUDIO_REVISION=2
LIB_SDAUDIO_AGE=0
AC_SUBST(LIB_SDAUDIO_CURRENT)
AC_SUBST(LIB_SDAUDIO_REVISION)
AC_SUBST(LIB_SDAUDIO_AGE)

LIB_SPD_CURRENT=2
LIB_SPD_REVISION=4
LIB_SPD_AGE=0
AC_SUBST(LIB_SPD_CURRENT)
AC_SUBST(LIB_SPD_REVISION)
AC_SUBST(LIB_SPD_AGE)

AC_OUTPUT([Makefile src/Makefile src/server/Makefile src/modules/Makefile src/c/Makefile src/c/api/Makefile src/c/clients/Makefile src/c/clients/say/Makefile src/c/clients/spdsend/Makefile src/tests/Makefile src/audio/Makefile config/Makefile config/modules/Makefile config/clients/Makefile doc/Makefile])

